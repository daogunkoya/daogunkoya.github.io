{"version":3,"sources":["actions.js","api/api.js","constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","components/MainPage.js","containers/App.js","registerServiceWorker.js","reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","console","log","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","aria-label","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","Component","CounterButton","count","nextProps","nextState","_this2","color","onClick","Header","components_CounterButton","MainPage","_Component","filterRobots","_this$props","searchField","filter","robot","toLowerCase","includes","inherits","createClass","value","onRequestRobots","_this$props2","onSearchChange","isPending","components_Header","components_SearchBox","components_Scroll","ErrorBoundry","components_CardList","App","components_MainPage","connect","searchRobots","event","target","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","react_redux_es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ab3dff0a.chunk.js","sourcesContent":["import { apiCall } from './api/api'\r\nimport {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants'\r\n\r\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n  apiCall('https://jsonplaceholder.typicode.com/users')\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const apiCall = (link) =>\r\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  console.log(\"CardList\");\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  console.log('SearchBox');\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        aria-label=\"Search\"\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  console.log('Scroll');\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = { hasError: false }\r\n  }\r\n\r\n  componentDidCatch (error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render () {\r\n    console.log('ErrorBoundary');\r\n    if (this.state.hasError) {\r\n      return <h1>Something went wrong.</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary","import React, {Component} from 'react';\r\n\r\nclass CounterButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {count: 1};\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.state.count !== nextState.count) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        id='counter'\r\n        color={this.props.color}\r\n        onClick={() => this.setState(state => ({count: state.count + 1}))}>\r\n        Count: {this.state.count}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CounterButton","import React, {Component} from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\n// In most cases, instead of writing shouldComponentUpdate()\r\n// by hand, you can inherit from React.PureComponent. It is\r\n// equivalent to implementing shouldComponentUpdate() with a\r\n// shallow comparison of current and previous props and state.\r\n\r\nclass Header extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return false\r\n  }\r\n  render() {\r\n    console.log('header')\r\n    return (\r\n      <div>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <CounterButton />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundry from './ErrorBoundry';\r\nimport Header from './Header';\r\n\r\nexport class MainPage extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      count: 1\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  filterRobots = () => {\r\n    const { robots, searchField } = this.props;\r\n    return robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { onSearchChange, isPending } = this.props;\r\n\r\n    return (\r\n      <div className='tc'>\r\n        <Header count={this.state.count}/>\r\n        <SearchBox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n          { isPending ? <h1>Loading</h1> :\r\n            <ErrorBoundry>\r\n              <CardList robots={this.filterRobots()} />\r\n            </ErrorBoundry>\r\n          }\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainPage\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nimport MainPage from '../components/MainPage'\r\n\r\nimport './App.css';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return <MainPage {...this.props}/>\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      return Object.assign({}, state, {searchField: action.payload})\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  robots: [],\r\n  isPending: true\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending: true})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload})\r\n    default:\r\n      return state\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport 'tachyons';\r\n\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport { requestRobots, searchRobots } from './reducers'\r\n\r\nimport './index.css';\r\n\r\nconst logger = createLogger()\r\n\r\nconst rootReducers = combineReducers({requestRobots, searchRobots})\r\n\r\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}